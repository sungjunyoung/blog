<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sungjunyoung</title><link>https://sungjunyoung.github.io/</link><description>Recent content on sungjunyoung</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 29 Jun 2021 19:30:48 +0900</lastBuildDate><atom:link href="https://sungjunyoung.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes 의 Ephemeral Storage 리소스 이해하기</title><link>https://sungjunyoung.github.io/posts/what-is-ephemral-storage/</link><pubDate>Tue, 29 Jun 2021 19:30:48 +0900</pubDate><guid>https://sungjunyoung.github.io/posts/what-is-ephemral-storage/</guid><description>
Intro Kubernetes 는 실행 중인 컨테이너에서 사용할 리소스의 양을 지정할 수 있는 기능을 지원합니다.
리소스는 Pod 스펙 중 spec.containers[].resources.reequests 혹은 spec.containers[].resources.limits 로 지정이 가능합니다.
컨테이너에 대한 리소스 요청 (request) 을 지정하면 스케줄러가 이 리소스를 보고 해당 Pod 이 배치될 노드를 결정하며, 컨테이너에 대한 리소스 제한 (limit) 을 지정하면 실행 중인 컨테이너가 이 제한보다 많은 리소스를 사용할 수 없도록 제한하게 됩니다. 이 리소스 제한을 넘어가게 되면, Pod 이 Evict 되고 다른 노드로 넘어가는 등 운영 중에 생각지 못한 일이 발생할 수 있습니다.</description></item><item><title>Goroutine 은 어떻게 동작할까?</title><link>https://sungjunyoung.github.io/posts/how-goroutine-works/</link><pubDate>Mon, 17 May 2021 00:45:48 +0900</pubDate><guid>https://sungjunyoung.github.io/posts/how-goroutine-works/</guid><description>
본 포스트는 GopherCon 2018 Kavya Joshi 의 The Scheduler Saga 발표를 재구성하여 작성하였습니다.
Intro Golang 의 장점으로 빠짐없이 언급되는 것이 바로 강력한 동시성 지원입니다. 이 강력한 동시성에서 빠질 수 없는 요소가 바로 goroutine 입니다. 개발자는 go 키워드를 통해 goroutine 을 생성함으로서 손쉽게 동시성을 지원하는 프로그램을 개발할 수 있습니다. Channel 을 사용하면 goroutine 간에 데이터를 손쉽게 전달할 수 도 있죠.
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { go f() fmt.</description></item><item><title>About</title><link>https://sungjunyoung.github.io/about/</link><pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate><guid>https://sungjunyoung.github.io/about/</guid><description>
❤️ Golang / Kubernetes
✉️ Contact Email : junyoung.sung@naverlabs.com Facebook : https://www.facebook.com/wnsdud1861 🔗 Channel Github : https://github.com/sungjunyoung LinkedIn : https://www.linkedin.com/in/junyoung-sung-986412121/ 🐜 Career 2021.08 ~ / NAVER LABS : Software &amp;amp; Devops Engineer 2018.06 ~ 2021.07 / NAVER : Platform &amp;amp; Devops Engineer 2017.12 ~ 2018.06 / NAVER: Platform Development Intern 2016.08 ~ 2017.03 / Nomadstar: Server Development Intern 📺 Presentations 2021.</description></item></channel></rss>